name: Build kernel 
on:
  workflow_dispatch:
   inputs:
    codename:
        required: true
        type: string
        default: 'lineage_sm8150'
    repo:
        required: true
        type: string
        default: 'android_kernel_oneplus_sm8150'
  
jobs:
  build-kernelsu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_MAXSIZE: "2G"
      CCACHE_HARDLINK: "true"      
      KERNEL_CMDLINE: "ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-androidkernel- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1 O=out"
      CONFIG: "${{ inputs.repo }}"
      KERNEL_DEFCONFIG: "lineage_sm8150_defconfig"
      
    steps:                               
      - name: Installing dependencies
        run: |
          sudo apt update -y
          sudo apt install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi clang-14 llvm-14 lld-14 binutils-aarch64-linux-gnu binutils make python3 libssl-dev build-essential bc bison flex unzip libssl-dev ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs     
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      
      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
         
      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="master"
          SUSFS_BRANCH="kernel-4.14"

          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/ayuschatterjee/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone --depth=1 --single-branch https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          #cd susfs4ksu
          #git checkout b5c3ada461a61c6ad033693b7a00494ead3a28fd
          #cd ..
          git clone https://github.com/TheWildJames/kernel_patches.git          
          git clone --depth=1 --single-branch --branch lineage-22.1 https://github.com/LineageOS/${{ inputs.repo }} 
      
      - name: Add KernelSU-Next
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          #curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup/sh" | bash -s nongki
          
      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.14.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          cd ./KernelSU-Next
          
          echo "Applying next SUSFS patches..."
          #cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
          #patch -p1 --forward --fuzz=7 < 10_enable_susfs_for_ksu.patch || echo "Patch failed !"       
          
          echo "Applying next SUSFS Fix patches..."
          
          PATCH_FILE=../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch

          # Apply the patch and check if it fails
          if ! patch -p1 --forward --fuzz=7 < "$PATCH_FILE"; then
            echo "❌ Patch failed: $PATCH_FILE"
    
            echo -e "\n🔍 Dumping failed hunk lines (.rej files):\n"

            # Only show .rej files modified within the last 1 minute (likely from this patch)
            find . -name "*.rej" -type f -mmin -1 | while read -r rejfile; do
             echo "---- 🔥 $rejfile ----"
             cat "$rejfile"
             echo "---------------------------"
            done
           else
            echo "✅ Patch applied: $PATCH_FILE"

          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
          patch -p1 --forward --fuzz=7 < fix_core_hook.c.patch
          
          #cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_selinux.c.patch ./
          #patch -p1 --forward --fuzz=7 < fix_selinux.c.patch
            
          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_ksud.c.patch ./
          patch -p1 --forward --fuzz=7 < fix_ksud.c.patch

          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_rules.c.patch ./
          patch -p1 --forward --fuzz=7 < fix_rules.c.patch

          cp ../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
          patch -p1 --forward --fuzz=7 < fix_sucompat.c.patch
          
          # Change to common directory and apply SUSFS patch
          cd ..
          patch -p1 --forward --fuzz=7 < 50_add_susfs_in_kernel-4.14.patch || echo "Patch failed !"                

          cp ../kernel_patches/sultan/sys.c_fix.patch ./
          patch -p1 --fuzz=7 < sys.c_fix.patch

      - name: Apply KSU Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/next/syscall_hooks.patch ./
          patch -p1 -F 7 < syscall_hooks.patch
          
      - name: Apply Hide Stuff Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 7 < 69_hide_stuff.patch

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding configuration settings to ${{ inputs.codename }}_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

          # Add BBR Config
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          export DTC_EXT=dtc
          export PATH=$(pwd)/aarch64/bin:/usr/lib/llvm-14/bin:$PATH
          export ARCH=arm64
          export LD=ld.lld
          echo "Building the kernel..."
          
          make $KERNEL_CMDLINE $KERNEL_DEFCONFIG CC="ccache clang-14"
          make $KERNEL_CMDLINE scripts CC="ccache clang-14"
          make $KERNEL_CMDLINE prepare CC="ccache clang-14"
          make $KERNEL_CMDLINE CC="ccache clang-14" LD="ld.lld" -j$(nproc --all)
          cp out/arch/arm64/boot/Image ../AnyKernel3
          cd ..
          ls -la AnyKernel3/ 
       
      - name: Package Kernel
        run: |
         echo "Packaging kernel from: $(pwd)"
         ls -la AnyKernel3/
         cd AnyKernel3
         zip -r ../OP7_KSUN.zip *
         echo "Created kernel zip:"
         ls -l ../*.zip
         cd ..

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
           files: |
             OP7_KSUN.zip
        env:
            GITHUB_TOKEN: ${{ secrets.GH_PAT }}
